#pragma once
#include "ICollider.h"
#include "ColliderSystem.h"

/* [CircleCollider Component]
* 원 충돌 영역을 지정하여 충돌 체크를 담당하는 컴포넌트
* transform의 position을 중점으로 offset만큼 떨어뜨린 radius의 원 영역을 가진다
* bound 정보를 Update하며 ColliderSystem에서 sap 알고리즘을 사용하도록 지원한다.
* ICollider를 상속받은 모든 종류의 콜라이더와의 상호작용을 지원한다.
* isTrigger 플래그를 설정하여 Block, Overlap 처리를 지정할 수 있다.
* Block(collistion mode)시에는 transform의 이전 프레임 position으로 되돌아가게 한다.
* ColliderSystem에 등록되어 충돌 발생시 충돌 이벤트를 호출하게 되고,
* 각 이벤트 종류에 맞게 Script 컴포넌트를 찾아 이벤트 함수를 호출해준다. -> 유니티처럼 사용 가능하도록
* 
* TODO :: 축별 이동 제한 로직 추가
*/

class Transform;
class BoxCollider;
class CircleCollider : public ICollider
{
public:
    Transform* transform = nullptr;

    // collider
    Vector2 offset = Vector2::zero;
    float radius = 1.0f;

public:
    // component cycle
    CircleCollider() 
    {
        colliderType = ColliderType::Circle;
        ColliderSystem::Get().Regist(this);
    }
    ~CircleCollider() override { ColliderSystem::Get().Unregist(this); }

    void OnEnable() override;
    void UpdateBounds() override;
    bool isCollision(ICollider* other, ContactInfo& outContact) override;
    void FinalizeCollision() override;
    void OnDestroy() override;

private:
    // collistion cheak
    bool CheckCircleCollision(CircleCollider* other, ContactInfo& outContact);
    bool CheckBoxCollision(BoxCollider* other, ContactInfo& outContact);

    // 내부 체크용 (축별 이동 로직을 위한)
    //bool InternalCheckCollision(ICollider* other);

private:
    // collision event
    void OnCollisionEnter(ICollider* other, ContactInfo& outContact) override;
    void OnCollisionStay(ICollider* other, ContactInfo& outContact) override;
    void OnCollisionExit(ICollider* other) override;
    void OnTriggerEnter(ICollider* other) override;
    void OnTriggerStay(ICollider* other) override;
    void OnTriggerExit(ICollider* other) override;

public:
    // debug draw
    void DebugColliderDraw() override;
};

